// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: provider.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Provider service

func NewProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Provider service

type ProviderService interface {
	Test(ctx context.Context, in *Msg, opts ...client.CallOption) (*Msg, error)
}

type providerService struct {
	c    client.Client
	name string
}

func NewProviderService(name string, c client.Client) ProviderService {
	return &providerService{
		c:    c,
		name: name,
	}
}

func (c *providerService) Test(ctx context.Context, in *Msg, opts ...client.CallOption) (*Msg, error) {
	req := c.c.NewRequest(c.name, "Provider.Test", in)
	out := new(Msg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provider service

type ProviderHandler interface {
	Test(context.Context, *Msg, *Msg) error
}

func RegisterProviderHandler(s server.Server, hdlr ProviderHandler, opts ...server.HandlerOption) error {
	type provider interface {
		Test(ctx context.Context, in *Msg, out *Msg) error
	}
	type Provider struct {
		provider
	}
	h := &providerHandler{hdlr}
	return s.Handle(s.NewHandler(&Provider{h}, opts...))
}

type providerHandler struct {
	ProviderHandler
}

func (h *providerHandler) Test(ctx context.Context, in *Msg, out *Msg) error {
	return h.ProviderHandler.Test(ctx, in, out)
}
