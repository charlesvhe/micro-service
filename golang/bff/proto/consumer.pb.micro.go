// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: consumer.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Consumer service

func NewConsumerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Consumer service

type ConsumerService interface {
	Test(ctx context.Context, in *Msg, opts ...client.CallOption) (*Msg, error)
}

type consumerService struct {
	c    client.Client
	name string
}

func NewConsumerService(name string, c client.Client) ConsumerService {
	return &consumerService{
		c:    c,
		name: name,
	}
}

func (c *consumerService) Test(ctx context.Context, in *Msg, opts ...client.CallOption) (*Msg, error) {
	req := c.c.NewRequest(c.name, "Consumer.Test", in)
	out := new(Msg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consumer service

type ConsumerHandler interface {
	Test(context.Context, *Msg, *Msg) error
}

func RegisterConsumerHandler(s server.Server, hdlr ConsumerHandler, opts ...server.HandlerOption) error {
	type consumer interface {
		Test(ctx context.Context, in *Msg, out *Msg) error
	}
	type Consumer struct {
		consumer
	}
	h := &consumerHandler{hdlr}
	return s.Handle(s.NewHandler(&Consumer{h}, opts...))
}

type consumerHandler struct {
	ConsumerHandler
}

func (h *consumerHandler) Test(ctx context.Context, in *Msg, out *Msg) error {
	return h.ConsumerHandler.Test(ctx, in, out)
}
